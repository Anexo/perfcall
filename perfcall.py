#!/usr/bin/python

# Basic script to create CSV files exported from Perf tool  
#---------------------------------------------------------

#Copyright (C) 2015 by Tomas Lopez-Fragoso Rumeu <https://github.com/Anexo>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>
#---------------------------------------------------------

import subprocess
import sys
import time
import platform
import argparse

# If user does not introduce args, they will be ask through prompt:
if len(sys.argv) == 1:
        #Questions to user:
        print ''
        core_ts_perf = raw_input(' Which core for taskset perf? --> ')
        core_perf = raw_input(' Which core for perf to poll and executing task? --> ')
        interval = raw_input(' Time interval (e.g. 500 for 500ms)? --> ')

        #Energy event selection:
        perf_event = raw_input(' Select perf energy event:\n  1:Energy-Cores\n  2:Energy-pkg\n  3:Energy-ram\n --> ')
        task = raw_input(' Task to execute? --> ')
else:
        #Parsing data trough command line
        parser = argparse.ArgumentParser()
        parser.add_argument('-t', help = 'Enter core for taskset perf')
        parser.add_argument('-c', help = 'Enter cores(s) for perf to poll and execute task')
        parser.add_argument('-I', help  = 'Enter interval (e.g. 500 for 500ms)', type = int)
        parser.add_argument('-e', help = 'Enter perf energy event:\n 1:Energy-Cores\n 2:Energy-pkg\n 3:Energy-ram', type = int)
        parser.add_argument('-T', help = 'Enter core for taskset of task')
        parser.add_argument('-a', help = 'Enter task to execute', type = str)

        args = parser.parse_args()

        core_ts_perf = args.t
        core_perf = args.c
        interval = args.I
        perf_event = args.e
        core_ts_task = args.T
        task = args.a
 
#Selecting proper energy event:
if perf_event == 1:
        perf_event_text = "power/energy-cores/"
elif perf_event == 2:
        perf_event_text = "power/energy-pkg/"
else:
        perf_event_text = "power/energy-ram/"

#Final command:
cmd = 'sudo taskset -c %s perf stat -A -C %s -I %s -x , -e "%s" taskset -c %s %s' % (core_ts_perf, core_perf, interval, perf_event_text, core_ts_task, task)

#Print Execution:
print '\n Executing following task:'
print ' --> ' + cmd 
print '\n Executing...\n'

final_cmd = cmd.split()
print final_cmd

#Subprocess output to variable:
sp = subprocess.Popen(final_cmd, stderr=subprocess.PIPE)
output = sp.stderr.read()
sp.terminate()

#core_perf str to list
#core_perf = core_perf.split(',')

#Output file:
with open('output.csv', 'w') as outfile:
        #Header and timestamp:
        outfile.write('*****************************************************\n')
        outfile.write('File generated by Perfcall , ' + time.ctime() + '\n')
        outfile.write(str(platform.uname()))
        outfile.write('\n*****************************************************\n')
        outfile.write('\nCommand:\n' + cmd + '\n\n')
        #Variable:
        outfile.write('Core_ts_perf:\n' + str(core_ts_perf)  + '\n')
        outfile.write('Core_perf:\n' + str(core_perf)  + '\n')
        outfile.write('Interval:\n' + str(interval)  + '\n')
        outfile.write('Perf event:\n' + perf_event_text  + '\n')
        outfile.write('Number of cores analized by perf:\n' + str(len(core_perf)) + '\n')
        outfile.write('Task:\n' + task  + '\n\n')
        #Output:
        outfile.write('Result:\n\n')
        #subprocess.Popen(final_cmd, stderr=outfile)
        outfile.write(output)
